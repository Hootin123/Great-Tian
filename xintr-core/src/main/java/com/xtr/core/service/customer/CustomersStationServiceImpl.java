package com.xtr.core.service.customer;

import com.xtr.api.basic.ResultResponse;
import com.xtr.api.domain.customer.CustomersRecordBean;
import com.xtr.api.domain.customer.CustomersStationBean;
import com.xtr.api.domain.salary.CustomerPayrollBean;
import com.xtr.api.domain.salary.PayCycleBean;
import com.xtr.api.dto.customer.CustomersDto;
import com.xtr.api.service.customer.CustomerUpdateSalaryService;
import com.xtr.api.service.customer.CustomersRecordService;
import com.xtr.api.service.customer.CustomersStationService;
import com.xtr.api.service.salary.PayrollAccountService;
import com.xtr.comm.basic.BusinessException;
import com.xtr.comm.constant.CustomerConstants;
import com.xtr.comm.util.StringUtils;
import com.xtr.core.persistence.reader.customer.CustomersStationReaderMapper;
import com.xtr.core.persistence.reader.salary.CustomerPayrollReaderMapper;
import com.xtr.core.persistence.reader.salary.PayCycleReaderMapper;
import com.xtr.core.persistence.writer.customer.CustomersStationWriterMapper;
import com.xtr.core.persistence.writer.salary.CustomerPayrollWriterMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.expression.ParseException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.*;
import java.util.regex.Pattern;

/**
 * @author 王志新 robert.wang@xintairuan.com
 * @createTime:2016/8/12 17:54
 */
@Service("customersStationService")
public class CustomersStationServiceImpl implements CustomersStationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CustomersStationServiceImpl.class);

    @Resource
    private CustomersStationReaderMapper customersStationReaderMapper;

    @Resource
    private CustomersStationWriterMapper customersStationWriterMapper;

    @Resource
    private CustomersRecordService customersRecordService;

    @Resource
    private CustomerUpdateSalaryService customerUpdateSalaryService;

    @Resource
    private PayCycleReaderMapper payCycleReaderMapper;

    @Resource
    private PayrollAccountService payrollAccountService;

    @Resource
    private CustomerPayrollWriterMapper customerPayrollWriterMapper;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table customers_station
     *
     * @mbggenerated
     */
    public CustomersStationBean selectByPrimaryKey(Long stationId) {
        return customersStationReaderMapper.selectByPrimaryKey(stationId);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table customers_station
     *
     * @mbggenerated
     */
    public int deleteByPrimaryKey(Long stationId) {
        return customersStationWriterMapper.deleteByPrimaryKey(stationId);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table customers_station
     *
     * @mbggenerated
     */
    public int insert(CustomersStationBean record) {
        return customersStationWriterMapper.insert(record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table customers_station
     *
     * @mbggenerated
     */
    public int insertSelective(CustomersStationBean record) {
        return customersStationWriterMapper.insertSelective(record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table customers_station
     *
     * @mbggenerated
     */
    public int updateByPrimaryKeySelective(CustomersStationBean record) {
        return customersStationWriterMapper.updateByPrimaryKeySelective(record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table customers_station
     *
     * @mbggenerated
     */
    public int updateByPrimaryKey(CustomersStationBean record) {
        return customersStationWriterMapper.updateByPrimaryKey(record);
    }

    /**
     * 根据customerId查询员工岗位信息
     *
     * @param customerId
     * @return
     */
    @Override
    public CustomersStationBean selectCutomerStationByCustomerId(long customerId) {
        return customersStationReaderMapper.selectByCustomerId(customerId);
    }

    @Override
    public boolean moveCustomerDept(Long depId, long empId, long companyId) {
        PayCycleBean payCycleBean = payCycleReaderMapper.selectByCompanyId(companyId);
        if(payCycleBean!=null){
            customerPayrollWriterMapper.updatePayRollThreeStatus(empId, payCycleBean.getId());
        }
        return customersStationWriterMapper.updateDept(depId, empId) > 0;
    }

    /**
     * 查询工号是否有重复
     *
     * @param list
     * @return
     */
    public Map<Integer, List<CustomersStationBean>> selectStatonNumberForeach(List<String> list, Long companyId, int type, long customerId) {
//        return customersStationReaderMapper.selectStatonNumberForeach(list,companyId);
        //重复的LIST
        List<CustomersStationBean> copyList = new ArrayList<>();
//        //新增的LIST
//        List<CustomersStationBean> addList=new ArrayList<>();
//        //编辑的LIST
//        List<CustomersStationBean> editList=new ArrayList<>();
        Map<Integer, List<CustomersStationBean>> map = new HashMap<>();
        List<CustomersStationBean> dtoList = customersStationReaderMapper.selectStatonNumberForeach(list, companyId);
        if (dtoList != null && dtoList.size() > 0) {
            for (CustomersStationBean customersStationBean : dtoList) {
                if (customersStationBean != null && customersStationBean.getStationCustomerState() != null) {
                    if (type == CustomerConstants.CUSTOMER_WILLOPERATION_ADD) {
                        if (customersStationBean.getStationCustomerState().intValue() == CustomerConstants.CUSTOMER_PERSONSTATE_ENTER
                                || customersStationBean.getStationCustomerState().intValue() == CustomerConstants.CUSTOMER_PERSONSTATE_REGULAR) {
                            copyList.add(customersStationBean);
                            map.put(CustomerConstants.CUSTOMER_WILLOPERATIONSTATE_COPY, copyList);
                        }
//                        else if(customersStationBean.getStationCustomerState().intValue()==CustomerConstants.CUSTOMER_PERSONSTATE_LEAVE){
//                            editList.add(customersStationBean);
//                            map.put(CustomerConstants.CUSTOMER_WILLOPERATIONSTATE_EDIT,editList);
//                        }else if(customersStationBean.getStationCustomerState().intValue()==CustomerConstants.CUSTOMER_PERSONSTATE_DELETE){
//                            addList.add(customersStationBean);
//                            map.put(CustomerConstants.CUSTOMER_WILLOPERATIONSTATE_ADD,addList);
//                        }
                    } else if (type == CustomerConstants.CUSTOMER_WILLOPERATION_EDIT) {
                        if (customersStationBean.getStationCustomerId() != null && customersStationBean.getStationCustomerId().intValue() != customerId) {
                            if (customersStationBean.getStationCustomerState().intValue() == CustomerConstants.CUSTOMER_PERSONSTATE_ENTER
                                    || customersStationBean.getStationCustomerState().intValue() == CustomerConstants.CUSTOMER_PERSONSTATE_REGULAR
                                    || customersStationBean.getStationCustomerState().intValue() == CustomerConstants.CUSTOMER_PERSONSTATE_LEAVE) {
                                copyList.add(customersStationBean);
                                map.put(CustomerConstants.CUSTOMER_WILLOPERATIONSTATE_COPY, copyList);
                            }
//                            else if(customersStationBean.getStationCustomerState().intValue()==CustomerConstants.CUSTOMER_PERSONSTATE_DELETE){
//                                editList.add(customersStationBean);
//                                map.put(CustomerConstants.CUSTOMER_WILLOPERATIONSTATE_EDIT,editList);
//                            }
                        }

                    }
                }
//                else if(customersStationBean!=null && customersStationBean.getStationCustomerState()==null){
//                    if(type==CustomerConstants.CUSTOMER_WILLOPERATION_ADD){
//                        addList.add(customersStationBean);
//                        map.put(CustomerConstants.CUSTOMER_WILLOPERATIONSTATE_ADD,addList);
//                    }else if(type==CustomerConstants.CUSTOMER_WILLOPERATION_EDIT){
//                        if(customersStationBean.getStationCustomerId()!=null && customersStationBean.getStationCustomerId().intValue()!=customerId){
//                            editList.add(customersStationBean);
//                            map.put(CustomerConstants.CUSTOMER_WILLOPERATIONSTATE_EDIT,editList);
//                        }
//
//                    }
//                }
            }
        }
        return map;
    }

    /**
     * 查询员工的岗位信息
     *
     * @param map
     * @return
     */
    @Override
    public List<CustomersStationBean> selectByNoRegular(Map map) {

        return customersStationReaderMapper.selectByNoRegular(map);
    }

    /**
     * 自动更新员工状态为转正（必须是入职的员工）
     *
     * @param cus
     * @return
     */
    @Override
    public int updateStateByCustomerId(CustomersStationBean cus) {
        return customersStationWriterMapper.updateStateByCustomerId(cus);
    }

    /**
     * 批量插入员工岗位信息
     *
     * @param list
     * @return
     */
    public int insertBatch(List<CustomersStationBean> list) {
        return customersStationWriterMapper.insertBatch(list);
    }

    /**
     * 根据用户id更新岗位信息
     *
     * @param customersStationBean
     * @return
     */
    public int updateByCustomerId(CustomersStationBean customersStationBean) {
        return customersStationWriterMapper.updateByCustomerId(customersStationBean);
    }

    /**
     * 更新用户岗位信息
     *
     * @param customersStationBean
     * @param companyId
     * @return
     */
    public ResultResponse modifyCustomerStation(CustomersStationBean customersStationBean, Long companyId) throws Exception {
        ResultResponse resultResponse = new ResultResponse();
        //验证入职日期\转正日期
        Date compareDate = CustomerConstants.SDF_YEAR_MONTH_DAY_LINE.parse(CustomerConstants.SDF_YEAR_MONTH_DAY_LINE.format(new Date()));
        //如果转正日期小于等于当前日期,则必须勾选已转正复选框
        if (customersStationBean.getStationRegularTime() != null
                && !customersStationBean.getStationRegularTime().after(compareDate)
                && customersStationBean.getStationCustomerState() != null
                && customersStationBean.getStationCustomerState().intValue() == CustomerConstants.CUSTOMER_PERSONSTATE_ENTER) {
            resultResponse.setMessage("转正日期在当前日期之前,请勾选已转正复选框");
            return resultResponse;
        }
        if (customersStationBean.getStationCustomerState() != null && customersStationBean.getStationCustomerState().intValue() == CustomerConstants.CUSTOMER_PERSONSTATE_REGULAR) {//转正
            if (customersStationBean.getStationRegularTime() != null) {
                if (!customersStationBean.getStationRegularTime().before(compareDate)) {
                    resultResponse.setMessage("转正日期必须在当前日期之前");
                    return resultResponse;
                }
                if (!customersStationBean.getStationEnterTime().before(customersStationBean.getStationRegularTime())) {
                    resultResponse.setMessage("入职日期必须在转正日期之前");
                    return resultResponse;
                }
            } else {
                if (!customersStationBean.getStationEnterTime().before(compareDate)) {
                    resultResponse.setMessage("入职日期必须在当前日期之前");
                    return resultResponse;
                }
            }
        } else if (customersStationBean.getStationCustomerState() != null && customersStationBean.getStationCustomerState().intValue() == CustomerConstants.CUSTOMER_PERSONSTATE_ENTER) {//入职
            if (customersStationBean.getStationRegularTime() == null) {
                resultResponse.setMessage("请输入转正日期");
                return resultResponse;
            }
            if (!customersStationBean.getStationEnterTime().before(customersStationBean.getStationRegularTime())) {
                resultResponse.setMessage("入职日期必须在转正日期之前");
                return resultResponse;
            }
        }
        //验证工号是否是唯一的
        if (!StringUtils.isStrNull(customersStationBean.getStationCustomerNumber()) && companyId != null) {
            List<String> numberStrList = new ArrayList<>();
            numberStrList.add(customersStationBean.getStationCustomerNumber());
            Map<Integer, List<CustomersStationBean>> cardMap = selectStatonNumberForeach(numberStrList, companyId, CustomerConstants.CUSTOMER_WILLOPERATION_EDIT, customersStationBean.getStationCustomerId());
            if (cardMap != null && cardMap.size() > 0 && cardMap.get(CustomerConstants.CUSTOMER_WILLOPERATIONSTATE_COPY) != null && cardMap.get(CustomerConstants.CUSTOMER_WILLOPERATIONSTATE_COPY).size() > 0) {
                resultResponse.setMessage("工号已经存在");
                return resultResponse;
            }
        }
        customersStationBean.setStationUpdateTime(new Date());
        if (customersStationBean.getStationRegularTime() == null) {
            //特殊验证,将转正时间更新为空
            customersStationBean.setCheckRegularTime(1);
        }
        if (StringUtils.isStrNull(customersStationBean.getStationCustomerNumber())) {
            customersStationBean.setStationCustomerNumber("");
        }

        //查询更改之前的员工状态,判断是否存入员工记录中
        CustomersStationBean checkStationBean = selectByPrimaryKey(customersStationBean.getStationId());
        if (checkStationBean != null && checkStationBean.getStationCustomerState() != null) {
            Date newDate = new Date();
            CustomersRecordBean customersRecordBean = new CustomersRecordBean();
            customersRecordBean.setRecordCustomerId(customersStationBean.getStationCustomerId());
            customersRecordBean.setRecordOperationTime(newDate);
            customersRecordBean.setRecordCreateTime(newDate);
            customersRecordBean.setRecordUpdateTime(newDate);
            if (customersStationBean.getStationCustomerState().intValue() == CustomerConstants.CUSTOMER_PERSONSTATE_ENTER
                    && checkStationBean.getStationCustomerState().intValue() != customersStationBean.getStationCustomerState()) {//添加入职记录
                customersRecordBean.setRecordOperationType(CustomerConstants.CUSTOMER_RECORDTYPE_ENTER);
                int count = customersRecordService.insert(customersRecordBean);
                if (count <= 0) {
                    throw new BusinessException("插入员工记录失败");
                }
            } else if (customersStationBean.getStationCustomerState().intValue() == CustomerConstants.CUSTOMER_PERSONSTATE_REGULAR
                    && checkStationBean.getStationCustomerState().intValue() != customersStationBean.getStationCustomerState()) {//添加转正记录
                customersRecordBean.setRecordOperationType(CustomerConstants.CUSTOMER_PERSONSTATE_REGULAR);
                int count = customersRecordService.insert(customersRecordBean);
                if (count <= 0) {
                    throw new BusinessException("插入员工记录失败");
                }
            }
        }
        int count = updateByPrimaryKeySelective(customersStationBean);
        if (count <= 0) {
            throw new BusinessException("更新用户岗位信息失败");
        } else {
            //更新员工工资单
            try{
                payrollAccountService.generatePayroll(companyId,customersStationBean.getStationCustomerId());
            }catch(Exception e){
                LOGGER.info("员工编辑,更新员工工资单出现异常,说明没有设置薪资,不用理会");
            }
            resultResponse.setSuccess(true);
        }
        return resultResponse;
    }


    /**
     * 更新用户岗位信息
     *
     * @param customersStationBean
     * @param companyId
     * @return
     */
    public ResultResponse modifyCustomerStationNew(CustomersStationBean customersStationBean, Long companyId) throws Exception {
        ResultResponse resultResponse = new ResultResponse();
        if(customersStationBean==null || customersStationBean.getStationCustomerId()==null){
            throw new BusinessException("无用户信息");
        }
        //验证工号
        if(!StringUtils.isStrNull(customersStationBean.getStationCustomerNumber())){
            String regexNumber = "^((.*?)\\d+(.*?)){2,20}$";
            if(!Pattern.matches(regexNumber, customersStationBean.getStationCustomerNumber())){
                throw new BusinessException("请输入2-20个包含数字的字符");
            }
        }
        //验证入职日期\转正日期
        Date compareDate = CustomerConstants.SDF_YEAR_MONTH_DAY_LINE.parse(CustomerConstants.SDF_YEAR_MONTH_DAY_LINE.format(new Date()));
        if (customersStationBean.getStationCustomerState() == null
        ||(customersStationBean.getStationCustomerState() != null && customersStationBean.getStationCustomerState().intValue() != CustomerConstants.CUSTOMER_PERSONSTATE_REGULAR)) {//不是转正
            if(customersStationBean.getStationRegularTime() == null){
                resultResponse.setMessage("请选择员工转正时间");
                return resultResponse;
            }
            //todo 确认修改
//            if (!customersStationBean.getStationRegularTime().before(compareDate)) {
//                resultResponse.setMessage("转正日期必须在当前日期之前");
//                return resultResponse;
//            }
            if(customersStationBean.getStationRegularTime().getTime()<(customersStationBean.getStationEnterTime().getTime())){

                throw new BusinessException("转正日期不可小于入职日期");
            }
        }
        //验证工号是否是唯一的
        if (!StringUtils.isStrNull(customersStationBean.getStationCustomerNumber()) && companyId != null) {
            List<String> numberStrList = new ArrayList<>();
            numberStrList.add(customersStationBean.getStationCustomerNumber());
            Map<Integer, List<CustomersStationBean>> cardMap = selectStatonNumberForeach(numberStrList, companyId, CustomerConstants.CUSTOMER_WILLOPERATION_EDIT, customersStationBean.getStationCustomerId());
            if (cardMap != null && cardMap.size() > 0 && cardMap.get(CustomerConstants.CUSTOMER_WILLOPERATIONSTATE_COPY) != null && cardMap.get(CustomerConstants.CUSTOMER_WILLOPERATIONSTATE_COPY).size() > 0) {
                resultResponse.setMessage("工号已经存在");
                return resultResponse;
            }
        }

        customersStationBean.setStationUpdateTime(new Date());
        if (StringUtils.isStrNull(customersStationBean.getStationCustomerNumber())) {
            customersStationBean.setStationCustomerNumber("");
        }

        int count = updateByCustomerId(customersStationBean);
        if (count <= 0) {
            throw new BusinessException("更新用户岗位信息失败");
        } else {
            //更新员工工资单
            try{
                payrollAccountService.generatePayroll(companyId,customersStationBean.getStationCustomerId());
            }catch(Exception e){
                LOGGER.info("员工编辑,更新员工工资单出现异常,说明没有设置薪资,不用理会");
            }
            resultResponse.setSuccess(true);
        }
        return resultResponse;
    }
}
